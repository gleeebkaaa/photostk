import os
import logging
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import BOT_TOKEN, ALLOWED_USERS, APARTMENTS, PHOTOS_DIR

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ
os.makedirs(PHOTOS_DIR, exist_ok=True)

# FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
class UserStates(StatesGroup):
    waiting_for_apartment = State()
    waiting_for_download_date = State()
    waiting_for_download_apartment = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏
def get_apartment_keyboard(apartments):
    rows = []
    for i in range(0, len(apartments), 5):
        rows.append([KeyboardButton(text=apt) for apt in apartments[i:i+5]])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, one_time_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def start(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª /start")
    if not message.from_user.username or message.from_user.username not in ALLOWED_USERS:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ)
@dp.message(F.photo)
async def handle_single_photo(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {message.from_user.username}")
    if not message.from_user.username or message.from_user.username not in ALLOWED_USERS:
        return

    data = await state.get_data()
    current_apartment = data.get("current_apartment")

    if current_apartment:
        logger.info(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É {current_apartment}")
        await save_photos_batch(message, state, current_apartment, [message.photo[-1].file_id])
        return

    logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ")
    await state.update_data(file_id=message.photo[-1].file_id)
    keyboard = get_apartment_keyboard(APARTMENTS)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:", reply_markup=keyboard)
    await state.set_state(UserStates.waiting_for_apartment)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
@dp.message(UserStates.waiting_for_apartment)
async def process_apartment(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–≤–∞—Ä—Ç–∏—Ä—É: {message.text}")
    apartment = message.text.strip()
    if apartment not in APARTMENTS:
        logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: {apartment}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    data = await state.get_data()
    file_id = data.get("file_id")

    if not file_id:
        logger.warning("–ù–µ—Ç file_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        await state.clear()
        return

    await save_photos_batch(message, state, apartment, [file_id])
    await message.answer(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É {apartment}.", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(current_apartment=apartment)
    await state.clear()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
async def save_photos_batch(message, state, apartment, file_ids):
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—è—é {len(file_ids)} —Ñ–æ—Ç–æ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É {apartment}")
    current_date = datetime.now().strftime("%y-%m-%d")
    date_folder = os.path.join(PHOTOS_DIR, current_date)
    os.makedirs(date_folder, exist_ok=True)

    apartment_folder = os.path.join(date_folder, apartment)
    os.makedirs(apartment_folder, exist_ok=True)

    for idx, file_id in enumerate(file_ids):
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ {idx+1}/{len(file_ids)}. File ID: {file_id}")
        try:
            file = await bot.get_file(file_id)
            file_path = os.path.join(apartment_folder, f"{file_id}.jpg")
            await bot.download_file(file.file_path, file_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ {file_id}: {e}", exc_info=True)
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message(F.text == "/list")
async def list_photos(message: types.Message):
    if not message.from_user.username or message.from_user.username not in ALLOWED_USERS:
        return

    result = "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ:\n"
    for date_folder in sorted(os.listdir(PHOTOS_DIR)):
        date_path = os.path.join(PHOTOS_DIR, date_folder)
        if os.path.isdir(date_path):
            result += f"\nüìÖ {date_folder}:\n"
            for apt in sorted(os.listdir(date_path)):
                apt_path = os.path.join(date_path, apt)
                if os.path.isdir(apt_path):
                    count = len(os.listdir(apt_path))
                    result += f"  üè† {apt} ({count} —Ñ–æ—Ç–æ)\n"
    await message.answer(result or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

# –ö–æ–º–∞–Ω–¥–∞ /download
@dp.message(F.text == "/download")
async def download_photos(message: types.Message, state: FSMContext):
    if not message.from_user.username or message.from_user.username not in ALLOWED_USERS:
        return

    if not os.path.exists(PHOTOS_DIR):
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ.")
        return

    dates = sorted(os.listdir(PHOTOS_DIR))
    if not dates:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
        return

    keyboard = InlineKeyboardBuilder()
    for date in dates:
        keyboard.add(InlineKeyboardButton(text=date, callback_data=f"date_{date}"))
    keyboard.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard.as_markup())
    await state.set_state(UserStates.waiting_for_download_date)

# Callback –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(UserStates.waiting_for_download_date)
async def choose_apartment(callback: types.CallbackQuery, state: FSMContext):
    date = callback.data.split("_")[1]
    await state.update_data(selected_date=date)

    date_path = os.path.join(PHOTOS_DIR, date)
    apartments = sorted(os.listdir(date_path))
    if not apartments:
        await callback.message.edit_text("–ù–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä –∑–∞ —ç—Ç—É –¥–∞—Ç—É.")
        return

    keyboard = InlineKeyboardBuilder()
    for apt in apartments:
        keyboard.add(InlineKeyboardButton(text=apt, callback_data=f"apt_{apt}"))
    keyboard.adjust(2)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É:", reply_markup=keyboard.as_markup())
    await state.set_state(UserStates.waiting_for_download_apartment)

# Callback –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
@dp.callback_query(UserStates.waiting_for_download_apartment)
async def send_photos(callback: types.CallbackQuery, state: FSMContext):
    apartment = callback.data.split("_")[1]
    data = await state.get_data()
    date = data.get("selected_date")

    if not date:
        await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return

    apt_path = os.path.join(PHOTOS_DIR, date, apartment)
    if not os.path.exists(apt_path):
        await callback.message.answer("–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    archive_path = f"{apt_path}.zip"
    shutil.make_archive(apt_path, 'zip', apt_path)
    await callback.message.answer_document(types.FSInputFile(archive_path))
    os.remove(archive_path)
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(dp.start_polling(bot))
